<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Space of soGary]]></title>
  <subtitle><![CDATA[Let's Build Up Stark Industries]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://sogary.github.io/"/>
  <updated>2015-11-17T08:09:07.000Z</updated>
  <id>http://sogary.github.io/</id>
  
  <author>
    <name><![CDATA[soGary]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Retrofit的实现原理(一)]]></title>
    <link href="http://sogary.github.io/2015/11/17/Retrofit%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86-%E4%B8%80/"/>
    <id>http://sogary.github.io/2015/11/17/Retrofit的实现原理-一/</id>
    <published>2015-11-16T23:26:39.000Z</published>
    <updated>2015-11-17T08:09:07.000Z</updated>
    <content type="html"><![CDATA[<p>Retrofit框架实现的这么巧妙,虽然我们不需要再造一个轮子,但研究下轮子的实现还是很有帮助的。</p>
<p>Retrofit有几个关键的地方：</p>
<ul>
<li>用户自定义的接口和接口方法.(由动态代理创建对象.)</li>
<li>Converter转换器.(把response转换为一个具体的对象)</li>
<li>注解的使用.</li>
</ul>
<p>先从API来看。</p>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RestAdapter restAdapter = <span class="keyword">new</span> RestAdapter.Builder().setEndpoint(API_URL).build();</span><br></pre></td></tr></table></figure>
<p>build()其内部实现是这样的:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> RestAdapter <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (endpoint == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Endpoint may not be null."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ensureSaneDefaults();</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> RestAdapter(endpoint, clientProvider, httpExecutor, </span><br><span class="line">        callbackExecutor, requestInterceptor, converter, profiler, </span><br><span class="line">        errorHandler, log, logLevel);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当用户没有设置自定义的converter，client， httpExecutor（http访问执行的线程只对异步的retrofit有效）， callBackExecutor（异步的callBack执行的线程），errorHandler，log， RequestInterceptor的时候，就会使用retrofit默认的配置。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureSaneDefaults</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (converter == <span class="keyword">null</span>) &#123;</span><br><span class="line">        converter = Platform.get().defaultConverter();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (clientProvider == <span class="keyword">null</span>) &#123;</span><br><span class="line">        clientProvider = Platform.get().defaultClient();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (httpExecutor == <span class="keyword">null</span>) &#123;</span><br><span class="line">        httpExecutor = Platform.get().defaultHttpExecutor();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (callbackExecutor == <span class="keyword">null</span>) &#123;</span><br><span class="line">        callbackExecutor = Platform.get().defaultCallbackExecutor();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (errorHandler == <span class="keyword">null</span>) &#123;</span><br><span class="line">        errorHandler = ErrorHandler.DEFAULT;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (log == <span class="keyword">null</span>) &#123;</span><br><span class="line">        log = Platform.get().defaultLog();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (requestInterceptor == <span class="keyword">null</span>) &#123;</span><br><span class="line">        requestInterceptor = RequestInterceptor.NONE;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Platform.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Platform PLATFORM = findPlatform();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> Platform <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> PLATFORM;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Platform <span class="title">findPlatform</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Class.forName(<span class="string">"android.os.Build"</span>);<span class="comment">//只要android.os.Build的class可以正常找到,证明是在android平台</span></span><br><span class="line">        <span class="keyword">if</span> (Build.VERSION.SDK_INT != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Android();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ClassNotFoundException ignored) &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (System.getProperty(<span class="string">"com.google.appengine.runtime.version"</span>) != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AppEngine();   <span class="comment">//google的app Engine平台</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Base();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Retrofit的Android类继承了Platform，根据android的特性对配置项做了处理。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Android</span> <span class="keyword">extends</span> <span class="title">Platform</span> </span>&#123;</span><br><span class="line">    <span class="annotation">@Override</span> <span class="function">Converter <span class="title">defaultConverter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> GsonConverter(<span class="keyword">new</span> Gson());  <span class="comment">//默认的转换器是Gson</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span> Client.<span class="function">Provider <span class="title">defaultClient</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Client client;</span><br><span class="line">        <span class="keyword">if</span> (hasOkHttpOnClasspath()) &#123;  <span class="comment">//有okhttp的路径就使用 Okhttp</span></span><br><span class="line">            client = OkClientInstantiator.instantiate();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Build.VERSION.SDK_INT &lt; Build.VERSION_CODES.GINGERBREAD) &#123;</span><br><span class="line">            client = <span class="keyword">new</span> AndroidApacheClient(); <span class="comment">//没有okhttp,且版本小于2.3 使用HttpClient</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            client = <span class="keyword">new</span> UrlConnectionClient();  <span class="comment">//没有okhttp,且版本大于等于2.3 使用urlConnection.</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Client.Provider() &#123;</span><br><span class="line">            <span class="annotation">@Override</span> <span class="function"><span class="keyword">public</span> Client <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> client;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span> <span class="function">Executor <span class="title">defaultHttpExecutor</span><span class="params">()</span> </span>&#123;   <span class="comment">//网络访问执行的线程.</span></span><br><span class="line">        <span class="keyword">return</span> Executors.newCachedThreadPool(<span class="keyword">new</span> ThreadFactory() &#123;  <span class="comment">//一个cached的线程池.可以复用老线程且线程长时间不用会自动回收. 线程池中线程不够会生成新线程.</span></span><br><span class="line">            <span class="annotation">@Override</span> <span class="function"><span class="keyword">public</span> Thread <span class="title">newThread</span><span class="params">(<span class="keyword">final</span> Runnable r)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                    <span class="annotation">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                        Process.setThreadPriority(THREAD_PRIORITY_BACKGROUND);    <span class="comment">//设置线程的优先级 为最低</span></span><br><span class="line">                        r.run();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, RestAdapter.IDLE_THREAD_NAME);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span> <span class="function">Executor <span class="title">defaultCallbackExecutor</span><span class="params">()</span> </span>&#123; <span class="comment">//异步执行的线程.</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MainThreadExecutor();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span> RestAdapter.<span class="function">Log <span class="title">defaultLog</span><span class="params">()</span> </span>&#123;  <span class="comment">//通过Log.d("Retrofit",String)打印log</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AndroidLog(<span class="string">"Retrofit"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">hasOkHttpOnClasspath</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Class.forName(<span class="string">"com.squareup.okhttp.OkHttpClient"</span>); <span class="comment">//是否可以找到OkHttpClient类.</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ClassNotFoundException ignored) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以发现上面默认的Http的Executor是一个线程池。<br>而CallBack的Executor是在主线程执行的。由绑定MainLooper的Handler提交到主线程执行。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">MainThreadExecutor</span> <span class="keyword">implements</span> <span class="title">Executor</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Handler handler = <span class="keyword">new</span> Handler(Looper.getMainLooper()); <span class="comment">//关联主线程的Handler</span></span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Runnable r)</span> </span>&#123;</span><br><span class="line">        handler.post(r);                                 <span class="comment">//提交到主线程执行</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">post</span><span class="params">(Runnable r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span>  sendMessageDelayed(getPostMessage(r), <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Message <span class="title">getPostMessage</span><span class="params">(Runnable r)</span> </span>&#123;   <span class="comment">//把runnable封装到Message中.</span></span><br><span class="line">    Message m = Message.obtain();</span><br><span class="line">    m.callback = r;</span><br><span class="line">    <span class="keyword">return</span> m;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>Retrofit框架实现的这么巧妙,虽然我们不需要再造一个轮子,但研究下轮子的实现还是很有帮助的。</p>
<p>Retrofit有几个关键的地方：</p>
<ul>
<li>用户自定义的接口和接口方法.(由动态代理创建对象.)</li>
<li>Converter转换器.(把response转换为一个具体的对象)</li>
<li>注解的使用.</li>
</ul>
<p>先从API来看。</p>]]>
    
    </summary>
    
      <category term="Android" scheme="http://sogary.github.io/tags/Android/"/>
    
      <category term="Network" scheme="http://sogary.github.io/tags/Network/"/>
    
      <category term="Retrofit" scheme="http://sogary.github.io/tags/Retrofit/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[简单服务器架构改造]]></title>
    <link href="http://sogary.github.io/2015/11/11/%E7%AE%80%E5%8D%95%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%9E%B6%E6%9E%84%E6%94%B9%E9%80%A0/"/>
    <id>http://sogary.github.io/2015/11/11/简单服务器架构改造/</id>
    <published>2015-11-11T00:51:42.000Z</published>
    <updated>2015-11-11T01:10:48.000Z</updated>
    <content type="html"><![CDATA[<p>最近朋友需要做一个线上流量峰值很大的活动，第一天由于某段时间太多人并发访问，服务器性能到峰值就崩溃了。他用的是Discuz里面一个简单插件，之前是付钱让外面的人帮忙搭起来的。我那天晚上看了一下情况，然后我也达到疯值崩溃了。</p>
<p>他们在阿里云买了单台服务器，所有东西丢进去，把CPU，内存和网络资源调整得比较高。一台云服务器甚至比我做的一套框架还贵😂。为了避免高并发带来的系统崩溃，我开始帮他在现有的系统下改服务器架构。</p>
<a id="more"></a>
<h2 id="单服务器">单服务器</h2><p>他们原来的部署逻辑是把所有的东西丢在同一台服务，然后把这台服务器的性能调高。显然这种小学生的做法只可以满足一些低并发的需求，几个人玩玩泥沙这样做是没问题的。但是，我朋友的活动有几十万人参与，而且有比较集中的峰值，这种架构显然不能撑起所有访问。</p>
<p><img src="http://7xo6cz.com1.z0.glb.clouddn.com/20151111/singleserver.png" alt="singleserver"></p>
<h2 id="负载均衡">负载均衡</h2><p>首先我把数据库进行了分离，业务处理与数据处理的分离有效减少服务器的计算和IO压力。云数据库本身的HA和定期备份比较有保证。这样数据本身可以安全的被隔离，而读写访问的压力也分离了。</p>
<p>之后我用四台性能比前面提及到的单机低的云服务器，分别搭建了该系统。由于系统程序本身的局限性，我把业务逻辑和文件处理放在了一起，加上一个负载均衡做访问分发。由于Session同步问题，我使用了源IP访问的形式进行访问的分发。</p>
<p><img src="http://7xo6cz.com1.z0.glb.clouddn.com/20151111/loadbalance.png" alt="laodbalance"></p>
<h2 id="文件服务器">文件服务器</h2><p>经过数据库分离和负载均衡，在峰值的时候我们发现速度有所改进，页面打开的时候很快有反应，但是图片加载非常慢，导致整体页面打开速度非常慢。通过服务器的参数对比，发现网络流量占用特别大，原因是图片没有集中存储进行独立分发，需要在四台服务器进行分发。当大量并发访问的时候，所有的流量都用于分发图片，没办法支撑起新的请求。</p>
<p>我们立刻做了一个应急处理，我把所有服务器的带宽都动态调整到较大的最高值。而且，我发现大量图片占用的空间偏大，分发的时候严重占用带宽，就算缩小10倍也不会影响用户使用。所以，我让朋友把所有图片都缩小。最后利用这种方法听过去，活动顺利结束。</p>
<p>由于这类活动会频繁举行，我想在空档期间把系统进行改造。把图片服务器分离出来，使用第三方对象存储进行图片访问和分发，例如现在很火的<a href="http://www.qiniu.com/" target="_blank" rel="external">七牛</a>。由于这种改造需求修改源码，所以日后开始开发的时候就需要考虑到这种情况。</p>
<p><img src="http://7xo6cz.com1.z0.glb.clouddn.com/20151111/withfileserver.png" alt="withfileserver"></p>
<h2 id="内存存储">内存存储</h2><p>到再下一步，网站比较多动态态数据更新频率不高，可以用内存存储进行纪录。而且对与网站访问，把Session统一存放也是比较好管理的。所以，增加内存存储能够帮助系统提升性能和可用性。有了内存存储能够提升部分访问速度，而且可以把负载均衡的分发改成轮询，使应用服务器的压力分配比较平均。</p>
<p><img src="http://7xo6cz.com1.z0.glb.clouddn.com/20151111/withmemory.png" alt="withmemory"></p>
<h2 id="总结">总结</h2><p>当我们做服务器架构的时候需要考虑大一点，不是把所有东西放在一台服务器上，然后把单台服务器性能提升就可以解决问题的。术业有专攻，不同的服务器完成不同的功能，通力合作，这样顺利才能完成大量任务。当然，要处理更大的业务量，这种架构肯定好快出现瓶颈，还有很多更加细节的优化需要注意。</p>
<p>这里只是纪录我平时的一些工作或者一些想法，也会写一写自己对一些技术的理解，当然还会分享一些比较厉害的文章。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近朋友需要做一个线上流量峰值很大的活动，第一天由于某段时间太多人并发访问，服务器性能到峰值就崩溃了。他用的是Discuz里面一个简单插件，之前是付钱让外面的人帮忙搭起来的。我那天晚上看了一下情况，然后我也达到疯值崩溃了。</p>
<p>他们在阿里云买了单台服务器，所有东西丢进去，把CPU，内存和网络资源调整得比较高。一台云服务器甚至比我做的一套框架还贵😂。为了避免高并发带来的系统崩溃，我开始帮他在现有的系统下改服务器架构。</p>]]>
    
    </summary>
    
      <category term="Framework" scheme="http://sogary.github.io/tags/Framework/"/>
    
      <category term="Server" scheme="http://sogary.github.io/tags/Server/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello World]]></title>
    <link href="http://sogary.github.io/2015/11/09/hello-world/"/>
    <id>http://sogary.github.io/2015/11/09/hello-world/</id>
    <published>2015-11-09T07:38:12.000Z</published>
    <updated>2015-11-09T07:38:12.000Z</updated>
    <content type="html"><![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick_Start">Quick Start</h2><h3 id="Create_a_new_post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<a id="more"></a>
<h3 id="Run_server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate_static_files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy_to_remote_sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Welcome to <a href="http://hexo.io/">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick_Start">Quick Start</h2><h3 id="Create_a_new_post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/writing.html">Writing</a></p>]]>
    
    </summary>
    
      <category term="Hexo" scheme="http://sogary.github.io/tags/Hexo/"/>
    
  </entry>
  
</feed>
